{"ast":null,"code":"var _jsxFileName = \"/home/mnepraj/loginPage/src/features/Login.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Typography } from '@mui/material';\nimport GoogleLoginButton from './googleLogin';\nimport { jwtDecode } from 'jwt-decode'; // Import jwt-decode\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  role,\n  onLogin\n}) => {\n  _s();\n  const navigate = useNavigate(); // Initialize the navigate function\n\n  const responseMessage = response => {\n    const token = response.credential; // Assuming the token is available in the response\n    const decodedToken = jwtDecode(token); // Decode the JWT token\n    const {\n      email\n    } = decodedToken; // Extract email from the decoded token\n    console.log(`${role} Login Success:`, {\n      email\n    });\n\n    // Handle the login response\n    if (onLogin) {\n      onLogin(email);\n      navigate('/home'); // Navigate to the home page after successful login\n    }\n  };\n  const errorMessage = error => {\n    console.log(`${role} Login Failed:`, error);\n    // Handle login error\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h2\",\n      gutterBottom: true,\n      className: \"login-title\",\n      children: [role, \" Login\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLoginButton, {\n      onSuccess: responseMessage,\n      onError: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Typography","GoogleLoginButton","jwtDecode","useNavigate","jsxDEV","_jsxDEV","Login","role","onLogin","_s","navigate","responseMessage","response","token","credential","decodedToken","email","console","log","errorMessage","error","className","children","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","_c","$RefreshReg$"],"sources":["/home/mnepraj/loginPage/src/features/Login.js"],"sourcesContent":["import React from 'react';\nimport { Typography } from '@mui/material';\nimport GoogleLoginButton from './googleLogin';\nimport { jwtDecode } from 'jwt-decode'; // Import jwt-decode\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\nimport './Login.css';\n\nconst Login = ({ role, onLogin }) => {\n  const navigate = useNavigate(); // Initialize the navigate function\n\n  const responseMessage = (response) => {\n    const token = response.credential; // Assuming the token is available in the response\n    const decodedToken = jwtDecode(token); // Decode the JWT token\n    const { email } = decodedToken; // Extract email from the decoded token\n    console.log(`${role} Login Success:`, { email });\n\n    // Handle the login response\n    if (onLogin) {\n      onLogin(email);\n      navigate('/home'); // Navigate to the home page after successful login\n    }\n  };\n\n  const errorMessage = (error) => {\n    console.log(`${role} Login Failed:`, error);\n    // Handle login error\n  };\n\n  return (\n    <div className=\"login-container\">\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom className=\"login-title\">\n        {role} Login\n      </Typography>\n      <GoogleLoginButton onSuccess={responseMessage} onError={errorMessage} />\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,iBAAiB,MAAM,eAAe;AAC7C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMQ,eAAe,GAAIC,QAAQ,IAAK;IACpC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,UAAU,CAAC,CAAC;IACnC,MAAMC,YAAY,GAAGb,SAAS,CAACW,KAAK,CAAC,CAAC,CAAC;IACvC,MAAM;MAAEG;IAAM,CAAC,GAAGD,YAAY,CAAC,CAAC;IAChCE,OAAO,CAACC,GAAG,CAAE,GAAEX,IAAK,iBAAgB,EAAE;MAAES;IAAM,CAAC,CAAC;;IAEhD;IACA,IAAIR,OAAO,EAAE;MACXA,OAAO,CAACQ,KAAK,CAAC;MACdN,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC9BH,OAAO,CAACC,GAAG,CAAE,GAAEX,IAAK,gBAAe,EAAEa,KAAK,CAAC;IAC3C;EACF,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BjB,OAAA,CAACL,UAAU;MAACuB,OAAO,EAAC,IAAI;MAACC,SAAS,EAAC,IAAI;MAACC,YAAY;MAACJ,SAAS,EAAC,aAAa;MAAAC,QAAA,GACzEf,IAAI,EAAC,QACR;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbxB,OAAA,CAACJ,iBAAiB;MAAC6B,SAAS,EAAEnB,eAAgB;MAACoB,OAAO,EAAEZ;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAAApB,EAAA,CA7BKH,KAAK;EAAA,QACQH,WAAW;AAAA;AAAA6B,EAAA,GADxB1B,KAAK;AA+BX,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}